# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Open3D::3rdparty_threads Open3D::3rdparty_assimp Open3D::3rdparty_openmp Open3D::3rdparty_x11 Open3D::3rdparty_eigen3 Open3D::3rdparty_nanoflann Open3D::3rdparty_glew Open3D::3rdparty_glfw Open3D::3rdparty_jpeg Open3D::3rdparty_jsoncpp Open3D::3rdparty_liblzf Open3D::3rdparty_tritriintersect Open3D::3rdparty_openssl Open3D::3rdparty_curl Open3D::3rdparty_zlib Open3D::3rdparty_png Open3D::3rdparty_rply Open3D::3rdparty_tinyfiledialogs Open3D::3rdparty_tinygltf Open3D::3rdparty_tinyobjloader Open3D::3rdparty_qhull_r Open3D::3rdparty_qhullcpp Open3D::3rdparty_fmt Open3D::3rdparty_poisson Open3D::3rdparty_opengl Open3D::3rdparty_zeromq Open3D::3rdparty_msgpack Open3D::3rdparty_vtk Open3D::3rdparty_uvatlas Open3D::3rdparty_blas Open3D::tbb Open3D::3rdparty_embree Open3D::Open3D)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target Open3D::3rdparty_threads
add_library(Open3D::3rdparty_threads INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_threads PROPERTIES
  INTERFACE_LINK_LIBRARIES "Threads::Threads"
)

# Create imported target Open3D::3rdparty_assimp
add_library(Open3D::3rdparty_assimp INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_assimp PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_assimp.a"
)

# Create imported target Open3D::3rdparty_openmp
add_library(Open3D::3rdparty_openmp INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_openmp PROPERTIES
  INTERFACE_LINK_LIBRARIES "OpenMP::OpenMP_CXX"
)

# Create imported target Open3D::3rdparty_x11
add_library(Open3D::3rdparty_x11 INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_x11 PROPERTIES
  INTERFACE_LINK_LIBRARIES "X11::X11"
)

# Create imported target Open3D::3rdparty_eigen3
add_library(Open3D::3rdparty_eigen3 INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_eigen3 PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/open3d/3rdparty"
)

# Create imported target Open3D::3rdparty_nanoflann
add_library(Open3D::3rdparty_nanoflann INTERFACE IMPORTED)

# Create imported target Open3D::3rdparty_glew
add_library(Open3D::3rdparty_glew STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_glew PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/open3d/3rdparty"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>"
)

# Create imported target Open3D::3rdparty_glfw
add_library(Open3D::3rdparty_glfw INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_glfw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/open3d/3rdparty"
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_glfw.a;Open3D::3rdparty_threads;/usr/lib/aarch64-linux-gnu/librt.a;/usr/lib/aarch64-linux-gnu/libm.so;dl;Open3D::3rdparty_x11"
)

# Create imported target Open3D::3rdparty_jpeg
add_library(Open3D::3rdparty_jpeg INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_jpeg PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_jpeg.a"
)

# Create imported target Open3D::3rdparty_jsoncpp
add_library(Open3D::3rdparty_jsoncpp INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_jsoncpp PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_jsoncpp.a"
)

# Create imported target Open3D::3rdparty_liblzf
add_library(Open3D::3rdparty_liblzf STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_liblzf PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>"
)

# Create imported target Open3D::3rdparty_tritriintersect
add_library(Open3D::3rdparty_tritriintersect INTERFACE IMPORTED)

# Create imported target Open3D::3rdparty_openssl
add_library(Open3D::3rdparty_openssl INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_openssl PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_openssl_ssl.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_openssl_crypto.a"
)

# Create imported target Open3D::3rdparty_curl
add_library(Open3D::3rdparty_curl INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_curl PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_curl.a;Open3D::3rdparty_openssl"
)

# Create imported target Open3D::3rdparty_zlib
add_library(Open3D::3rdparty_zlib INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_zlib PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_zlib.a"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libz.a>"
)

# Create imported target Open3D::3rdparty_png
add_library(Open3D::3rdparty_png INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_png PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_png.a;Open3D::3rdparty_zlib"
)

# Create imported target Open3D::3rdparty_rply
add_library(Open3D::3rdparty_rply STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_rply PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>"
)

# Create imported target Open3D::3rdparty_tinyfiledialogs
add_library(Open3D::3rdparty_tinyfiledialogs STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_tinyfiledialogs PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>"
)

# Create imported target Open3D::3rdparty_tinygltf
add_library(Open3D::3rdparty_tinygltf INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_tinygltf PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TINYGLTF_IMPLEMENTATION;STB_IMAGE_IMPLEMENTATION;STB_IMAGE_WRITE_IMPLEMENTATION"
)

# Create imported target Open3D::3rdparty_tinyobjloader
add_library(Open3D::3rdparty_tinyobjloader INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_tinyobjloader PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "TINYOBJLOADER_IMPLEMENTATION"
)

# Create imported target Open3D::3rdparty_qhull_r
add_library(Open3D::3rdparty_qhull_r STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_qhull_r PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>"
)

# Create imported target Open3D::3rdparty_qhullcpp
add_library(Open3D::3rdparty_qhullcpp STATIC IMPORTED)

set_target_properties(Open3D::3rdparty_qhullcpp PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>;\$<LINK_ONLY:Open3D::3rdparty_qhull_r>"
)

# Create imported target Open3D::3rdparty_fmt
add_library(Open3D::3rdparty_fmt INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_fmt PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "FMT_HEADER_ONLY=0;FMT_USE_WINDOWS_H=0;FMT_STRING_ALIAS=1"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/open3d/3rdparty"
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_fmt.a"
)

# Create imported target Open3D::3rdparty_poisson
add_library(Open3D::3rdparty_poisson INTERFACE IMPORTED)

# Create imported target Open3D::3rdparty_opengl
add_library(Open3D::3rdparty_opengl INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_opengl PROPERTIES
  INTERFACE_LINK_LIBRARIES "OpenGL::GL"
)

# Create imported target Open3D::3rdparty_zeromq
add_library(Open3D::3rdparty_zeromq INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_zeromq PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_zeromq.a"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libzmq.a>"
)

# Create imported target Open3D::3rdparty_msgpack
add_library(Open3D::3rdparty_msgpack INTERFACE IMPORTED)

# Create imported target Open3D::3rdparty_vtk
add_library(Open3D::3rdparty_vtk INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_vtk PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkFiltersGeneral-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkFiltersSources-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkFiltersModeling-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkFiltersCore-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonExecutionModel-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonDataModel-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonTransforms-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonMath-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonMisc-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonSystem-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkCommonCore-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkkissfft-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtkpugixml-9.1.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_vtk_vtksys-9.1.a;dl"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersGeneral-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersSources-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersModeling-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersCore-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonExecutionModel-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonDataModel-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonTransforms-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonMath-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonMisc-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonSystem-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonCore-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkkissfft-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkpugixml-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtksys-9.1.a>"
)

# Create imported target Open3D::3rdparty_uvatlas
add_library(Open3D::3rdparty_uvatlas INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_uvatlas PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_uvatlas.a"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libUVAtlas.a>"
)

# Create imported target Open3D::3rdparty_blas
add_library(Open3D::3rdparty_blas INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_blas PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_blas.a;/usr/lib/gcc/aarch64-linux-gnu/13/libgfortran.a;/usr/lib/gcc/aarch64-linux-gnu/13/libgcc.a"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libopenblas.a>"
)

# Create imported target Open3D::tbb
add_library(Open3D::tbb SHARED IMPORTED)

set_target_properties(Open3D::tbb PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<CONFIG:DEBUG>:TBB_USE_DEBUG>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target Open3D::3rdparty_embree
add_library(Open3D::3rdparty_embree INTERFACE IMPORTED)

set_target_properties(Open3D::3rdparty_embree PROPERTIES
  INTERFACE_LINK_LIBRARIES "${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_embree4.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_simd.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_lexers.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_sys.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_math.a;${_IMPORT_PREFIX}/lib/libOpen3D_3rdparty_embree_tasking.a"
  INTERFACE_LINK_OPTIONS "\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libembree4.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libsimd.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,liblexers.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libsys.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libmath.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libtasking.a>"
)

# Create imported target Open3D::Open3D
add_library(Open3D::Open3D STATIC IMPORTED)

set_target_properties(Open3D::Open3D PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=1;OPEN3D_STATIC;_GLIBCXX_USE_CXX11_ABI=1;FMT_HEADER_ONLY=0;FMT_USE_WINDOWS_H=0;FMT_STRING_ALIAS=1"
  INTERFACE_COMPILE_FEATURES "cxx_std_17"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/open3d/3rdparty;${_IMPORT_PREFIX}/include/open3d/3rdparty;${_IMPORT_PREFIX}/include/open3d/3rdparty"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:stdc++fs>;\$<LINK_ONLY:Open3D::3rdparty_assimp>;\$<LINK_ONLY:Open3D::3rdparty_nanoflann>;\$<LINK_ONLY:Open3D::3rdparty_glfw>;\$<LINK_ONLY:Open3D::3rdparty_jpeg>;\$<LINK_ONLY:Open3D::3rdparty_jsoncpp>;\$<LINK_ONLY:Open3D::3rdparty_liblzf>;\$<LINK_ONLY:Open3D::3rdparty_tritriintersect>;\$<LINK_ONLY:Open3D::3rdparty_curl>;\$<LINK_ONLY:Open3D::3rdparty_png>;\$<LINK_ONLY:Open3D::3rdparty_rply>;\$<LINK_ONLY:Open3D::3rdparty_tinyfiledialogs>;\$<LINK_ONLY:Open3D::3rdparty_tinygltf>;\$<LINK_ONLY:Open3D::3rdparty_tinyobjloader>;\$<LINK_ONLY:Open3D::3rdparty_qhullcpp>;\$<LINK_ONLY:Open3D::3rdparty_poisson>;\$<LINK_ONLY:Open3D::3rdparty_zeromq>;\$<LINK_ONLY:Open3D::3rdparty_msgpack>;\$<LINK_ONLY:Open3D::3rdparty_vtk>;\$<LINK_ONLY:Open3D::3rdparty_uvatlas>;\$<LINK_ONLY:Open3D::3rdparty_blas>;\$<LINK_ONLY:Open3D::tbb>;\$<LINK_ONLY:Open3D::3rdparty_embree>;\$<LINK_ONLY:Open3D::3rdparty_openmp>;Open3D::3rdparty_eigen3;\$<LINK_ONLY:Open3D::3rdparty_glew>;\$<LINK_ONLY:Open3D::3rdparty_glfw>;\$<LINK_ONLY:Open3D::3rdparty_fmt>;\$<LINK_ONLY:Open3D::3rdparty_opengl>"
  INTERFACE_LINK_OPTIONS "\$<\$<STREQUAL:\$<TARGET_PROPERTY:Open3D::Open3D,TYPE>,STATIC_LIBRARY>:\$<LINK_ONLY:\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libz.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libzmq.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersGeneral-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersSources-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersModeling-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkFiltersCore-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonExecutionModel-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonDataModel-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonTransforms-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonMath-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonMisc-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonSystem-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkCommonCore-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkkissfft-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtkpugixml-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libvtksys-9.1.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libUVAtlas.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libopenblas.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libembree4.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libsimd.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,liblexers.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libsys.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libmath.a>;\$<\$<CXX_COMPILER_ID:GNU>:LINKER:--exclude-libs,libtasking.a>>>"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/Open3DTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
